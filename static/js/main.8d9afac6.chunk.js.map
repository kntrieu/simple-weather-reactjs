{"version":3,"sources":["components/Header.js","components/AddressForm.js","components/Results.js","components/Content.js","constants/constants.js","index.js"],"names":["Header","props","state","Row","Col","md","span","offset","className","href","React","Component","AddressForm","textRef","useRef","placeholder","id","type","ref","onClick","keyword","current","value","onSearch","Results","loadingImg","errorText","this","isLoading","src","width","height","isError","result","cityName","weather","icon","temp","wind","cloudiness","pressure","humidity","sunrise","sunset","geoCoords","Content","results","formatState","bind","data","setState","main","name","speed","clouds","all","moment","unix","sys","format","coord","lon","lat","Math","round","axios","get","then","response","console","log","catch","error","App","ReactDOM","render","document","querySelector"],"mappings":"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","file":"static/js/main.8d9afac6.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport {Row} from 'react-bootstrap';\r\nimport {Col} from 'react-bootstrap';\r\n\r\nclass Header extends React.Component {\r\n    constructor (props) {\r\n        super (props);\r\n        this.state = {};\r\n    }\r\n\r\n    render () {\r\n        return (\r\n            <Row>\r\n                <Col md={{ span: 12, offset: 0 }}>\r\n                    <nav className=\"navbar navbar-dark bg-info\">\r\n                        <a className=\"navbar-brand\" href=\"#\">Welcome to simple weather</a>\r\n                    </nav>\r\n                </Col>\r\n            </Row>\r\n            \r\n        )\r\n    }\r\n}\r\n\r\nexport default Header;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport {Row} from 'react-bootstrap';\r\nimport {Col} from 'react-bootstrap';\r\nimport {Form} from 'react-bootstrap';\r\nimport {Button} from 'react-bootstrap';\r\n\r\n\r\nconst AddressForm = (props) => {\r\n\r\n    const textRef = React.useRef();\r\n\r\n    const handleSearch = () => {\r\n        var keyword = textRef.current.value;\r\n        props.onSearch(keyword);\r\n    }\r\n\r\n    return (\r\n        <>\r\n        <Row>\r\n           <Col md={{ span: 10, offset: 0 }}>\r\n               <input placeholder=\"Enter location\" id=\"searchBtn\" type=\"text\" ref={textRef} className=\"form-control\"/>\r\n            </Col>\r\n           <Col md={{ span: 2, offset: 0 }}>\r\n               <button className=\"btn btn-primary w-100\" onClick={handleSearch}>Search</button>\r\n            </Col>\r\n        </Row>\r\n         </>\r\n    );\r\n}\r\n\r\nexport default AddressForm;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport {Row} from 'react-bootstrap';\r\nimport {Col} from 'react-bootstrap';\r\nimport {Form} from 'react-bootstrap';\r\nimport {Button} from 'react-bootstrap';\r\nimport {Card} from 'react-bootstrap';\r\nimport AddressForm from './AddressForm';\r\n\r\n\r\n\r\nclass Results extends React.Component {\r\n    constructor (props) {\r\n        super(props);\r\n        this.state = {};\r\n    }\r\n\r\n\r\n    render () {\r\n        let loadingImg = \"\";\r\n        let errorText = \"\";\r\n        if (this.props.isLoading) {\r\n            loadingImg = <img src=\"loading.gif\" width=\"20\" height=\"20\"/>\r\n        }\r\n\r\n        if (this.props.isError) {\r\n            errorText = \"No location found!\";\r\n        }\r\n        return (\r\n            <div className=\"result-table\">\r\n                <Row>\r\n                    <Col>\r\n                    <span className=\"text-danger\">{errorText}</span>\r\n                    <div className=\"card\">\r\n                        <div className=\"card-header bg-dark text-light\">\r\n                            <h5>\r\n                                {this.props.result.cityName ? \"Weather in \" + this.props.result.cityName : \"Please enter location\"}\r\n                                {loadingImg}\r\n                            </h5>\r\n                        </div>\r\n                        <div className=\"card-body bg-dark\">\r\n                            <ul className=\"list-group list-group-flush\">\r\n                                <li className=\"list-group-item main-results\">\r\n                                    Main weather:\r\n                                    <p> {this.props.result.weather}</p>\r\n                                    <p><img src={this.props.result.icon} /></p>\r\n                                </li>\r\n\r\n                                <li className=\"list-group-item main-results\">\r\n                                    Temperature: {this.props.result.temp ? this.props.result.temp + '\\u00b0' + \"C\" : \"\"} \r\n                                </li>\r\n                            </ul>\r\n                        </div>\r\n                    </div>\r\n                    </Col>\r\n                    <Col>\r\n                        <table className=\"table table-striped table-dark\">\r\n                            <tbody>\r\n                            <tr>\r\n                                <td>\r\n                                Wind\r\n                                </td>\r\n\r\n                                <td>\r\n                                {this.props.result.wind}\r\n                                </td>\r\n                            </tr>\r\n\r\n                            <tr>\r\n                                <td>\r\n                                Cloudiness\r\n                                </td>\r\n\r\n                                <td>\r\n                                {this.props.result.cloudiness}\r\n                                </td>\r\n                            </tr>\r\n\r\n                            <tr>\r\n                                <td>\r\n                                Pressure\r\n                                </td>\r\n\r\n                                <td>\r\n                                {this.props.result.pressure}\r\n                                </td>\r\n                            </tr>\r\n\r\n                            <tr>\r\n                                <td>\r\n                                Humidity\r\n                                </td>\r\n\r\n                                <td>\r\n                                {this.props.result.humidity}\r\n                                </td>\r\n                            </tr>\r\n\r\n                            <tr>\r\n                                <td>\r\n                                Sunrise\r\n                                </td>\r\n\r\n                                <td>\r\n                                {this.props.result.sunrise}   \r\n                                </td>\r\n                            </tr>\r\n\r\n                            <tr>\r\n                                <td>\r\n                                Sunset\r\n                                </td>\r\n\r\n                                <td>\r\n                                {this.props.result.sunset}   \r\n                                </td>\r\n                            </tr>\r\n\r\n                            <tr>\r\n                                <td>\r\n                                Geo coords\r\n                                </td>\r\n\r\n                                <td>\r\n                                {this.props.result.geoCoords}\r\n                                </td>\r\n                            </tr>\r\n                            </tbody>\r\n                        </table>\r\n                    </Col>\r\n                </Row>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Results;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport {Row} from 'react-bootstrap';\r\nimport {Col} from 'react-bootstrap';\r\nimport {Form} from 'react-bootstrap';\r\nimport {Button} from 'react-bootstrap';\r\nimport {Card} from 'react-bootstrap';\r\nimport AddressForm from './AddressForm';\r\nimport Results from './Results';\r\nimport * as Constants from '../constants/constants';\r\nimport axios from 'axios';\r\nimport moment from \"moment\";\r\n\r\nclass Content extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            results: {\r\n                weather: null,\r\n                icon: null,\r\n                cityName: null,\r\n                wind: \"N/A\",\r\n                cloudiness: \"N/A\",\r\n                pressure: \"N/A\",\r\n                humidity: \"N/A\",\r\n                sunrise: \"N/A\",\r\n                sunset: \"N/A\",\r\n                geoCoords: \"N/A\",\r\n                temp: null\r\n\r\n            },\r\n\r\n            isLoading: false,\r\n            isError: false,\r\n        }\r\n        this.formatState = this.formatState.bind(this);\r\n        this.onSearch = this.onSearch.bind(this);\r\n    } \r\n\r\n    formatState (data, keyword) {\r\n        const cityName = keyword;\r\n        this.setState({\r\n            results: {\r\n                weather: data.weather[0].main,\r\n                icon: `https://openweathermap.org/img/wn/${data.weather[0].icon}@2x.png`,\r\n                cityName: data.name,\r\n                wind: data.wind.speed + \"m/s\",\r\n                cloudiness: data.clouds.all + \" %\",\r\n                pressure: data.main.pressure + \" hpa\",\r\n                humidity: data.main.humidity + '%',\r\n                sunrise: moment.unix(data.sys.sunrise).format(\"HH:mm:ss\"),\r\n                sunset: moment.unix(data.sys.sunset).format(\"HH:mm:ss\"),\r\n                geoCoords: `[${data.coord.lon}, ${data.coord.lat}]`,\r\n                temp: Math.round(data.main.temp - 273.15)\r\n            }\r\n        })\r\n    }\r\n\r\n    \r\n\r\n    onSearch (keyword) {\r\n        if (!keyword) {\r\n            return;\r\n        }\r\n\r\n        // const res = Constants.FAKE_DATA;\r\n\r\n        //Get data from api by city name\r\n        this.setState({isLoading: true});\r\n        this.setState({isError: false});\r\n        axios.get(Constants.BASE_WEATHER_URL + `?q=${keyword}&appid=${Constants.API_KEY}`).then(response => {\r\n            console.log(response);\r\n            this.setState({isLoading: false});\r\n            this.formatState (response.data, keyword);\r\n        }).catch(error => {\r\n            this.setState({isLoading: false});\r\n            this.setState({isError: true});\r\n        })\r\n\r\n        // setTimeout(() => {\r\n        //     this.formatState (res.data, keyword);\r\n        // }, 500)\r\n        \r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <Row>\r\n                <Col md={{ span: 12, offset: 0 }}>\r\n                    <br/>\r\n                    <AddressForm onSearch={this.onSearch} />\r\n                    <br/><br/>\r\n                    <Results result={this.state.results} isError={this.state.isError} isLoading={this.state.isLoading}/>\r\n                </Col>\r\n            </Row>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nexport default Content;","export const BASE_WEATHER_URL = \"https://cors-anywhere.herokuapp.com/https://api.openweathermap.org/data/2.5/weather\";\r\nexport const API_KEY = \"04ca925fa8ea7ecb903d0aa8357cf5dd\";\r\nexport const FAKE_DATA = {\r\n    data: {\r\n        \"coord\": {\r\n            \"lon\": 105.84,\r\n            \"lat\": 21.02\r\n        },\r\n        \"weather\": [\r\n            {\r\n                \"id\": 701,\r\n                \"main\": \"Mist\",\r\n                \"description\": \"mist\",\r\n                \"icon\": \"50d\"\r\n            }\r\n        ],\r\n        \"base\": \"stations\",\r\n        \"main\": {\r\n            \"temp\": 289.15,\r\n            \"feels_like\": 289.25,\r\n            \"temp_min\": 289.15,\r\n            \"temp_max\": 289.15,\r\n            \"pressure\": 1015,\r\n            \"humidity\": 93\r\n        },\r\n        \"visibility\": 2800,\r\n        \"wind\": {\r\n            \"speed\": 2.1,\r\n            \"deg\": 50\r\n        },\r\n        \"clouds\": {\r\n            \"name\": \"Broken clouds\"\r\n        },\r\n        \"dt\": 1578898475,\r\n        \"sys\": {\r\n            \"type\": 1,\r\n            \"id\": 9308,\r\n            \"country\": \"VN\",\r\n            \"sunrise\": 1578872155,\r\n            \"sunset\": 1578911615\r\n        },\r\n        \"timezone\": 25200,\r\n        \"id\": 1581130,\r\n        \"name\": \"Hanoi\",\r\n        \"cod\": 200\r\n    }\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport PropTypes from 'prop-types';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport './css/index.css';\r\nimport { Container } from 'react-bootstrap';\r\nimport Header from './components/Header';\r\nimport Content from './components/Content';\r\n\r\n\r\nclass App extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {};\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"container w-100 p-3 bg-dark\">\r\n                <Header/>\r\n                <Content/>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nReactDOM.render(<App/>, document.querySelector(\"#root\"));"],"sourceRoot":""}